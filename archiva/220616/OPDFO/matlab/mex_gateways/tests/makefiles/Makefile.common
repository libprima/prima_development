# This Makefile tests the MEX gateways of the modern-Fortran version of Powell's solvers on multiple compilers.
#
# The following compilers are tested:
# 9: G95
# a: Absoft af95
# d: AOCC flang
# f: Classic flang
# g: GNU gfortran
# n: NAG nagfor
# i: Intel ifort
# s: Oracle sunf95
# v: NVIDIA nvfortran
# x: Intel ifx
#
# The following tests are available, where C = 9, a, d, f, g, n, i, s, v, x, and N = 2, 4, 8:
# Ctest: test with compiler C
# Ctest_iN: test with compiler C and integer kind INT(N*8)
#
# Coded by Zaikun ZHANG (www.zhangzk.net).
#
# Started: January 2021
#
# Last Modified: February 2022
####################################################################################################

#$(VERBOSE).SILENT:  # Order make to work quietly. Not desirable in this case.

SHELL = /bin/bash

####################################################################################################
# Variables

# Fortran standard to follow. We aim to make the code compatible with F2008 and above.
FS ?= 08
FSTD := 20$(FS)

# Test directory. Needed by FFLAGS1/2.
TEST_SOLVER_DIR := $(CURDIR)
TEST_DIR := $(TEST_SOLVER_DIR)/..

# Default options for all the compilers.
FFLAGS1 := -O3 -I$(TEST_SOLVER_DIR)
FFLAGS2 := -g -O0 -I$(TEST_SOLVER_DIR)

# Log file stamp.
RANDNUM := $(shell awk 'BEGIN{srand();printf("%d", 65536*rand())}')
TIME := $(shell date +%Y.%m.%d_%H.%M.%S)
STAMP := $(TIME)_$(RANDNUM)

# Log directory.
LOG_DIR := $(TEST_SOLVER_DIR)/log
# Trash directory.
TRASH_DIR := $(TEST_SOLVER_DIR)/trash
# Fortran source directory.
FSRC_DIR := $(TEST_DIR)/../../../fsrc
# Common directory.
COMMON := common
COMMON_DIR := $(FSRC_DIR)/$(COMMON)
# Solver directory.
SOLVER_DIR := $(FSRC_DIR)/$(SOLVER)
# Mex gateway directory.
MEXGATE_DIR := $(TEST_DIR)/..
# Source directories.
SRC_DIRS := $(COMMON_DIR) $(SOLVER_DIR)

# Sources.
COMMON_SRC := $(shell sed "s/^/\.\/common\//" $(COMMON_DIR)/ffiles.txt)
SOLVER_SRC := $(shell sed "s/^/\.\/$(SOLVER)\//" $(SOLVER_DIR)/ffiles.txt)
MEXGATE_SRC := fmxapi.F90 cbfun.F90 gethuge.F90 $(SOLVER)_mex.F90
SRC := $(COMMON_SRC) $(SOLVER_SRC) $(MEXGATE_SRC)
# DEBUGF90 is the name of the Fortran file that defines `debug_mod`, which has a Fortran version and
# a MEX version. We should use the MEX version in place of the Fortran one when testing the MEX gateways.
DEBUGF90 := debug.F90

# Headers.
# N.B.: If we define COMMON as "./common/", then, when adapting the header, sed will complain
# that"./common//*.h" cannot be found on macOS.
HEADERS := $(TEST_SOLVER_DIR)/$(COMMON)/*.h

# The checktest script.
CHCKTST := $(TEST_DIR)/checktest

# Define the tests.
######################################################################################
# Decide whether to test QP, i.e., REAL128.
# Flang and nvfortran do not support REAL128;
# AOCC Flang complains about a symbol lookup error: undefined symbol: "fort_rnumq_i8";
# ifx encounters an internal error when compiling with REAL128.
TESTS_QP = atest gtest ntest itest stest 9test
TESTS_NO_QP = dtest ftest vtest xtest
TESTS = $(TESTS_QP) $(TESTS_NO_QP)
# When listing the tests, we first put the ones that are more likely to raise errors.
$(foreach TST, $(TESTS_QP), $(eval $(TST): SUBTESTS := \
	$(TST)_i2_r16_d1_tst $(TST)_i2_r4_d1_tst $(TST)_i2_r8_d1_tst \
	$(TST)_i4_r16_d1_tst $(TST)_i4_r4_d1_tst $(TST)_i4_r8_d1_tst \
	$(TST)_i8_r16_d1_tst $(TST)_i8_r4_d1_tst $(TST)_i8_r8_d1_tst \
	$(TST)_i2_r16_d0_tst $(TST)_i2_r4_d0_tst $(TST)_i2_r8_d0_tst \
	$(TST)_i4_r16_d0_tst $(TST)_i4_r4_d0_tst $(TST)_i4_r8_d0_tst \
	$(TST)_i8_r16_d0_tst $(TST)_i8_r4_d0_tst $(TST)_i8_r8_d0_tst \
	))
$(foreach TST, $(TESTS_NO_QP), $(eval $(TST): SUBTESTS := \
	$(TST)_i2_r4_d1_tst $(TST)_i2_r8_d1_tst \
	$(TST)_i4_r4_d1_tst $(TST)_i4_r8_d1_tst \
	$(TST)_i8_r4_d1_tst $(TST)_i8_r8_d1_tst \
	$(TST)_i2_r4_d0_tst $(TST)_i2_r8_d0_tst \
	$(TST)_i4_r4_d0_tst $(TST)_i4_r8_d0_tst \
	$(TST)_i8_r4_d0_tst $(TST)_i8_r8_d0_tst \
	))

# The tests with ifort, ifx, etc are slow due to the extensive runtime checks. To save time, we
# define the following tests. If itest_i2 succeeds, then itest_i4 and itest_i8 are likely (but not
# surely) to be OK, because the only difference in the code is the integer kind. Similar for others.
TESTS_INT_QP = atest_i2 atest_i4 atest_i8 \
			   gtest_i2 gtest_i4 gtest_i8 \
			   ntest_i2 ntest_i4 ntest_i8 \
			   itest_i2 itest_i4 itest_i8 \
			   stest_i2 stest_i4 stest_i8 \
			   9test_i2 9test_i4 9test_i8
TESTS_INT_NO_QP = dtest_i2 dtest_i4 dtest_i8 \
				  ftest_i2 ftest_i4 ftest_i8 \
				  vtest_i2 vtest_i4 vtest_i8 \
				  xtest_i2 xtest_i4 xtest_i8
TESTS_INT = $(TESTS_INT_QP) $(TESTS_INT_NO_QP)
$(foreach TST, $(TESTS_INT_QP), $(eval $(TST): SUBTESTS := \
	$(TST)_r16_d1_tst $(TST)_r4_d1_tst $(TST)_r8_d1_tst \
	$(TST)_r16_d0_tst $(TST)_r4_d0_tst $(TST)_r8_d0_tst \
	))
$(foreach TST, $(TESTS_INT_NO_QP), $(eval $(TST): SUBTESTS := \
	$(TST)_r4_d1_tst $(TST)_r8_d1_tst \
	$(TST)_r4_d0_tst $(TST)_r8_d0_tst \
	))

######################################################################################

.PHONY: all test clean $(TESTS) $(TESTS_INT) source_* header_* clean*

# Operating system.
OSTYPE :=
ifeq ($(OS),Windows_NT)
	OSTYPE = WINDOWS
else
	UNAME_S := $(shell uname -s)
	ifeq ($(UNAME_S),Darwin)
		OSTYPE = MAC
	else  # We assume the OS is LINUX by default.
		OSTYPE = LINUX
	endif
endif

# Define SEDI.
# When calling "sed -i" on macOS, it is obligatory to specify a string (e.g., .bak) after -i as the
# extension for saving a backup. If the string is "", then no backup will be saved. If no string is
# specified, then an error will be raised, saying "invalid command code".
SEDI :=
ifeq ($(OSTYPE), MAC)
	SEDI = @sed -i ""
else
	SEDI = @sed -i
endif

## Define NPROCS to be the number of processors available to make tests in parallel.
#NPROCS :=
#ifeq ($(OSTYPE), LINUX)
#	NPROCS = $(shell grep -c 'processor' /proc/cpuinfo 2>/dev/null || echo 1)
#else ifeq ($(OSTYPE), MAC)
#	NPROCS = $(shell sysctl hw.ncpu | grep -o '[0-9]\+' || echo 1)
#else
#	NPROCS = $(shell echo $(NUMBER_OF_PROCESSORS) || echo 1)
#endif


####################################################################################################
# Here are the testing options for each compiler. We try to turn on as many debugging options as
# possible, in particular, the options regarding the following are included whenever available.
# 1. Standard conformity.
# 2. Runtime bound checking of arrays.
# 3. IEEE 754 Floating-Point Exceptions (FPE).
# Depending on the compiler, some FPEs are ignored for the tests with r4 (single-precision real),
# e.g., over/underflow.
####################################################################################################

# Absoft af95
# For Debian-based systems, -no-pie is needed; for other systems, this option may not work.
AFORT :=
ifneq ("$(wildcard /etc/debian_version)","")
	AFORT = af95 -no-pie
else
	AFORT = af95
endif
AFORT := $(AFORT) -m1 -en -et -Rb -Rc -Rs -Rp

atest_i2_r4_d1_tst atest_i4_r4_d1_tst atest_i8_r4_d1_tst atest_i2_r4_d0_tst atest_i4_r4_d0_tst atest_i8_r4_d0_tst: \
	FC1 := $(AFORT) $(FFLAGS1) -TENV:simd_zmask=off
atest_i2_r4_d1_tst atest_i4_r4_d1_tst atest_i8_r4_d1_tst atest_i2_r4_d0_tst atest_i4_r4_d0_tst atest_i8_r4_d0_tst: \
	FC2 := $(AFORT) $(FFLAGS2) -TENV:simd_zmask=off

atest_i2_r8_d1_tst atest_i4_r8_d1_tst atest_i8_r8_d1_tst atest_i2_r8_d0_tst atest_i4_r8_d0_tst atest_i8_r8_d0_tst: \
	FC1 := $(AFORT) $(FFLAGS1) \
	-TENV:simd_zmask=off -TENV:simd_omask=off -TENV:simd_imask=off #-TENV:simd_dmask=off -TENV:simd_umask=off
atest_i2_r8_d1_tst atest_i4_r8_d1_tst atest_i8_r8_d1_tst atest_i2_r8_d0_tst atest_i4_r8_d0_tst atest_i8_r8_d0_tst: \
	FC2 := $(AFORT) $(FFLAGS2) \
	-TENV:simd_zmask=off -TENV:simd_omask=off -TENV:simd_imask=off #-TENV:simd_dmask=off -TENV:simd_umask=off

atest_i2_r16_d1_tst atest_i4_r16_d1_tst atest_i8_r16_d1_tst atest_i2_r16_d0_tst atest_i4_r16_d0_tst atest_i8_r16_d0_tst: \
	FC1 := $(AFORT) $(FFLAGS1) -TENV:simd_zmask=off
atest_i2_r16_d1_tst atest_i4_r16_d1_tst atest_i8_r16_d1_tst atest_i2_r16_d0_tst atest_i4_r16_d0_tst atest_i8_r16_d0_tst: \
	FC2 := $(AFORT) $(FFLAGS2) -TENV:simd_zmask=off

# AMD AOCC Flang
AFLANG := $(shell find -L /opt/AMD -type f -executable -name flang -print 2> /dev/null | sort | tail -n 1)
AFLANG := $(AFLANG) -pedantic-errors -Werror
# Strangely, with `-Mchkptr`, the compiler may not print the error message of `-Mbounds` anymore.
DFORT := $(AFLANG) -std=f$(FSTD) -pedantic -Weverything -Wall -Wextra -Minform=warn -Mstandard -Mbounds -Kieee #-Mchkptr

dtest_i2_r4_d1_tst dtest_i4_r4_d1_tst dtest_i8_r4_d1_tst dtest_i2_r4_d0_tst dtest_i4_r4_d0_tst dtest_i8_r4_d0_tst: \
	FC1 := $(DFORT) $(FFLAGS1)
dtest_i2_r4_d1_tst dtest_i4_r4_d1_tst dtest_i8_r4_d1_tst dtest_i2_r4_d0_tst dtest_i4_r4_d0_tst dtest_i8_r4_d0_tst: \
	FC2 := $(DFORT) $(FFLAGS2)

dtest_i2_r8_d1_tst dtest_i4_r8_d1_tst dtest_i8_r8_d1_tst dtest_i2_r8_d0_tst dtest_i4_r8_d0_tst dtest_i8_r8_d0_tst: \
	FC1 := $(DFORT) $(FFLAGS1) -ffp-exception-behavior=strict
dtest_i2_r8_d1_tst dtest_i4_r8_d1_tst dtest_i8_r8_d1_tst dtest_i2_r8_d0_tst dtest_i4_r8_d0_tst dtest_i8_r8_d0_tst: \
	FC2 := $(DFORT) $(FFLAGS2) -ffp-exception-behavior=strict

dtest_i2_r16_d1_tst dtest_i4_r16_d1_tst dtest_i8_r16_d1_tst dtest_i2_r16_d0_tst dtest_i4_r16_d0_tst dtest_i8_r16_d0_tst: \
	FC1 := $(DFORT) $(FFLAGS1) -ffp-exception-behavior=strict
dtest_i2_r16_d1_tst dtest_i4_r16_d1_tst dtest_i8_r16_d1_tst dtest_i2_r16_d0_tst dtest_i4_r16_d0_tst dtest_i8_r16_d0_tst: \
	FC2 := $(DFORT) $(FFLAGS2) -ffp-exception-behavior=strict

# Classic Flang
FFORT := flang
FFORT := $(FFORT) -pedantic-errors -Werror
FFORT := $(FFORT) -std=f$(FSTD) -pedantic -Weverything -Wall -Wextra -Minform=warn -Mstandard -Mbounds -Mchkptr -Kieee

ftest_i2_r4_d1_tst ftest_i4_r4_d1_tst ftest_i8_r4_d1_tst ftest_i2_r4_d0_tst ftest_i4_r4_d0_tst ftest_i8_r4_d0_tst: \
	FC1 := $(FFORT) $(FFLAGS1)
ftest_i2_r4_d1_tst ftest_i4_r4_d1_tst ftest_i8_r4_d1_tst ftest_i2_r4_d0_tst ftest_i4_r4_d0_tst ftest_i8_r4_d0_tst: \
	FC2 := $(FFORT) $(FFLAGS2)

ftest_i2_r8_d1_tst ftest_i4_r8_d1_tst ftest_i8_r8_d1_tst ftest_i2_r8_d0_tst ftest_i4_r8_d0_tst ftest_i8_r8_d0_tst: \
	FC1 := $(FFORT) $(FFLAGS1)
ftest_i2_r8_d1_tst ftest_i4_r8_d1_tst ftest_i8_r8_d1_tst ftest_i2_r8_d0_tst ftest_i4_r8_d0_tst ftest_i8_r8_d0_tst: \
	FC2 := $(FFORT) $(FFLAGS2)

ftest_i2_r16_d1_tst ftest_i4_r16_d1_tst ftest_i8_r16_d1_tst ftest_i2_r16_d0_tst ftest_i4_r16_d0_tst ftest_i8_r16_d0_tst: \
	FC1 := $(FFORT) $(FFLAGS1)
ftest_i2_r16_d1_tst ftest_i4_r16_d1_tst ftest_i8_r16_d1_tst ftest_i2_r16_d0_tst ftest_i4_r16_d0_tst ftest_i8_r16_d0_tst: \
	FC2 := $(FFORT) $(FFLAGS2)

# GNU gfortran
# In the debug mode, our code includes the BACKTRACE function if the compiler is gfortran. This
# makes the code not standard-conforming. So -std=f$(FSTD) is excluded for the following options.
# As of 2022, -Wextra implies -Wcompare-reals, -Wunused-parameter, and -Wdo-subscript.
GFORT := gfortran
GFORT := $(GFORT) -Wall -Wextra -pedantic -Wampersand -Wconversion  -Wuninitialized \
	-Wmaybe-uninitialized -Wsurprising -Waliasing  -Wimplicit-interface -Wimplicit-procedure \
	-Wintrinsics-std -Wunderflow -Wuse-without-only -Wunused-parameter \
	-fPIC -fimplicit-none -fbacktrace -fcheck=all \
	-finit-real=nan -finit-integer=-9999999
	#-Wrealloc-lhs -Wrealloc-lhs-all

gtest_i2_r4_d1_tst gtest_i4_r4_d1_tst gtest_i8_r4_d1_tst gtest_i2_r4_d0_tst gtest_i4_r4_d0_tst gtest_i8_r4_d0_tst: \
	FC1 := $(GFORT) $(FFLAGS1) -Wno-function-elimination -ffpe-trap=zero
gtest_i2_r4_d1_tst gtest_i4_r4_d1_tst gtest_i8_r4_d1_tst gtest_i2_r4_d0_tst gtest_i4_r4_d0_tst gtest_i8_r4_d0_tst: \
	FC2 := $(GFORT) $(FFLAGS2) -ffpe-trap=zero

gtest_i2_r8_d1_tst gtest_i4_r8_d1_tst gtest_i8_r8_d1_tst gtest_i2_r8_d0_tst gtest_i4_r8_d0_tst gtest_i8_r8_d0_tst: \
	FC1 := $(GFORT) $(FFLAGS1) -Wno-function-elimination -ffpe-trap=zero,invalid,overflow,#,underflow,denorm
gtest_i2_r8_d1_tst gtest_i4_r8_d1_tst gtest_i8_r8_d1_tst gtest_i2_r8_d0_tst gtest_i4_r8_d0_tst gtest_i8_r8_d0_tst: \
	FC2 := $(GFORT) $(FFLAGS2) -ffpe-trap=zero,invalid,overflow,#,underflow,denorm

gtest_i2_r16_d1_tst gtest_i4_r16_d1_tst gtest_i8_r16_d1_tst gtest_i2_r16_d0_tst gtest_i4_r16_d0_tst gtest_i8_r16_d0_tst: \
	FC1 := $(GFORT) $(FFLAGS1) -Wno-function-elimination -ffpe-trap=zero,invalid,overflow,#,underflow,denorm
gtest_i2_r16_d1_tst gtest_i4_r16_d1_tst gtest_i8_r16_d1_tst gtest_i2_r16_d0_tst gtest_i4_r16_d0_tst gtest_i8_r16_d0_tst: \
	FC2 := $(GFORT) $(FFLAGS2) -ffpe-trap=zero,invalid,overflow,#,underflow,denorm

# Intel ifort
# The compilation of the MEX gateways fails if `-stand f03` or higher is imposed. Thus we use `-stand f95`.
# -standard-semantics: enforce the compiler to behave according to the current standard (F2018 as of Dec 2021).
#  See https://www.intel.com/content/www/us/en/develop/documentation/fortran-compiler-oneapi-dev-guide-and-reference/top/compiler-reference/compiler-options/compiler-option-details/language-options/standard-semantics.html
#  Option standard-semantics enables option fpscomp logicals and the following settings for option
#  assume: byterecl, failed_images, fpe_summary, ieee_compares, ieee_fpe_flags (if the fp-model
#  option setting is strict or precise), minus0, nan_compares, noold_inquire_recl,
#  noold_ldout_format, noold_ldout_zero, noold_maxminloc, noold_unit_star, noold_xor,
#  protect_parens, realloc_lhs1, recursion, std_intent_in, std_minus0_rounding1, std_mod_proc_name,
#  and std_value1.
#  We impose -assume norecursion, because -standard-semantics will enable -assume recursion, which
#  will cause a warning; due to -warn errors, the compilation will abort. See
#  https://www.intel.com/content/www/us/en/develop/documentation/fortran-compiler-oneapi-dev-guide-and-reference/top/language-reference/a-to-z-reference/q-to-r/recursive-and-non-recursive.html
IFORT := ifort
IFORT := $(IFORT)  #-diag-error-limit 1
IFORT := $(IFORT) -stand f95 -standard-semantics -assume norecursion -warn all -debug extended -fimplicit-none \
	-traceback -debug-parameters all -fp-stack-check

itest_i2_r4_d1_tst itest_i4_r4_d1_tst itest_i8_r4_d1_tst itest_i2_r4_d0_tst itest_i4_r4_d0_tst itest_i8_r4_d0_tst: \
	FC1 := $(IFORT) $(FFLAGS1) -fp-trap=divzero
itest_i2_r4_d1_tst itest_i4_r4_d1_tst itest_i8_r4_d1_tst itest_i2_r4_d0_tst itest_i4_r4_d0_tst itest_i8_r4_d0_tst: \
	FC2 := $(IFORT) $(FFLAGS2) -check all -fp-trap=divzero

itest_i2_r8_d1_tst itest_i4_r8_d1_tst itest_i8_r8_d1_tst itest_i2_r8_d0_tst itest_i4_r8_d0_tst itest_i8_r8_d0_tst: \
	FC1 := $(IFORT) $(FFLAGS1) -ftrapuv -init=snan,array -fpe0 -fpe-all=0 -assume ieee_fpe_flags \
	-fp-trap=divzero,invalid,overflow#,underflow,denormal
	#-no-ftz -fp-model strict
itest_i2_r8_d1_tst itest_i4_r8_d1_tst itest_i8_r8_d1_tst itest_i2_r8_d0_tst itest_i4_r8_d0_tst itest_i8_r8_d0_tst: \
	FC2 := $(IFORT) $(FFLAGS2) -check all -ftrapuv -init=snan,array -fpe0 -fpe-all=0 -assume ieee_fpe_flags \
	-fp-trap=divzero,invalid,overflow#,underflow,denormal
	#-no-ftz -fp-model strict

itest_i2_r16_d1_tst itest_i4_r16_d1_tst itest_i8_r16_d1_tst itest_i2_r16_d0_tst itest_i4_r16_d0_tst itest_i8_r16_d0_tst: \
	FC1 := $(IFORT) $(FFLAGS1) -ftrapuv -init=snan,array -fpe0 -fpe-all=0 -assume ieee_fpe_flags \
	-fp-trap=divzero,invalid,overflow#,underflow,denormal
	#-no-ftz -fp-model strict
itest_i2_r16_d1_tst itest_i4_r16_d1_tst itest_i8_r16_d1_tst itest_i2_r16_d0_tst itest_i4_r16_d0_tst itest_i8_r16_d0_tst: \
	FC2 := $(IFORT) $(FFLAGS2) -check all -ftrapuv -init=snan,array -fpe0 -fpe-all=0 -assume ieee_fpe_flags \
	-fp-trap=divzero,invalid,overflow#,underflow,denormal
	#-no-ftz -fp-model strict

# NAG nagfor
# In massive tests, we skip the useful -mtrace option (print memory allocation trace), as its output is enormous.
# It is necessary to use "-I $(TESTSUITE_DIR)"; otherwise, the INCLUDE lines in the test suite will not work.
NFORT := nagfor
NFORT := $(NFORT) -colour=error:red,warn:magenta,info:cyan
NFORT := $(NFORT) -f$(FSTD) -info -gline -u -C -C=alias -C=dangling -C=intovf -kind=unique \
	-Warn=constant_coindexing -Warn=subnormal #-Warn=allocation
# 20211221: for the moment, -C=undefined may cause SEGFAULT in SAFEALLOC due to a bug of nagfor; has been reported to NAG.
#NFORT := $(NFORT) -f$(FSTD) -info -gline -u -C -C=alias -C=dangling -C=intovf -C=undefined -kind=unique \
	-Warn=constant_coindexing -Warn=subnormal #-Warn=allocation

ntest_i2_r4_d1_tst ntest_i4_r4_d1_tst ntest_i8_r4_d1_tst ntest_i2_r4_d0_tst ntest_i4_r4_d0_tst ntest_i8_r4_d0_tst: \
	FC1 := $(NFORT) $(FFLAGS1) -nan -ieee=full
ntest_i2_r4_d1_tst ntest_i4_r4_d1_tst ntest_i8_r4_d1_tst ntest_i2_r4_d0_tst ntest_i4_r4_d0_tst ntest_i8_r4_d0_tst: \
	FC2 := $(NFORT) $(FFLAGS2) -nan -ieee=full

ntest_i2_r8_d1_tst ntest_i4_r8_d1_tst ntest_i8_r8_d1_tst ntest_i2_r8_d0_tst ntest_i4_r8_d0_tst ntest_i8_r8_d0_tst: \
	FC1 := $(NFORT) $(FFLAGS1) -nan -ieee=stop
ntest_i2_r8_d1_tst ntest_i4_r8_d1_tst ntest_i8_r8_d1_tst ntest_i2_r8_d0_tst ntest_i4_r8_d0_tst ntest_i8_r8_d0_tst: \
	FC2 := $(NFORT) $(FFLAGS2) -nan -ieee=stop

ntest_i2_r16_d1_tst ntest_i4_r16_d1_tst ntest_i8_r16_d1_tst ntest_i2_r16_d0_tst ntest_i4_r16_d0_tst ntest_i8_r16_d0_tst: \
	FC1 := $(NFORT) $(FFLAGS1) -nan -ieee=stop
ntest_i2_r16_d1_tst ntest_i4_r16_d1_tst ntest_i8_r16_d1_tst ntest_i2_r16_d0_tst ntest_i4_r16_d0_tst ntest_i8_r16_d0_tst: \
	FC2 := $(NFORT) $(FFLAGS2) -nan -ieee=stop

# NVIDIA nvfortran (aka, pgfortran)
VFORT := $(shell find -L /opt/nvidia -type f -executable -name nvfortran -print 2> /dev/null | sort | tail -n 1)
VFORT := $(VFORT) -Werror
VFORT := $(VFORT) -C -Wall -Wextra -Minform=warn -Mstandard -Mbounds -Mchkstk -Mchkptr

vtest_i2_r4_d1_tst vtest_i4_r4_d1_tst vtest_i8_r4_d1_tst vtest_i2_r4_d0_tst vtest_i4_r4_d0_tst vtest_i8_r4_d0_tst: \
	FC1 := $(VFORT) $(FFLAGS1) -Kieee -Ktrap=divz
vtest_i2_r4_d1_tst vtest_i4_r4_d1_tst vtest_i8_r4_d1_tst vtest_i2_r4_d0_tst vtest_i4_r4_d0_tst vtest_i8_r4_d0_tst: \
	FC2 := $(VFORT) $(FFLAGS2) -Kieee -Ktrap=divz

vtest_i2_r8_d1_tst vtest_i4_r8_d1_tst vtest_i8_r8_d1_tst vtest_i2_r8_d0_tst vtest_i4_r8_d0_tst vtest_i8_r8_d0_tst: \
	FC1 := $(VFORT) $(FFLAGS1) -Kieee -Ktrap=divz,ovf,inv#,unf,denorm
vtest_i2_r8_d1_tst vtest_i4_r8_d1_tst vtest_i8_r8_d1_tst vtest_i2_r8_d0_tst vtest_i4_r8_d0_tst vtest_i8_r8_d0_tst: \
	FC2 := $(VFORT) $(FFLAGS2) -Kieee -Ktrap=divz,ovf,inv#,unf,denorm

vtest_i2_r16_d1_tst vtest_i4_r16_d1_tst vtest_i8_r16_d1_tst vtest_i2_r16_d0_tst vtest_i4_r16_d0_tst vtest_i8_r16_d0_tst: \
	FC1 := $(VFORT) $(FFLAGS1) -Kieee -Ktrap=divz,ovf,inv#,unf,denorm
vtest_i2_r16_d1_tst vtest_i4_r16_d1_tst vtest_i8_r16_d1_tst vtest_i2_r16_d0_tst vtest_i4_r16_d0_tst vtest_i8_r16_d0_tst: \
	FC2 := $(VFORT) $(FFLAGS2) -Kieee -Ktrap=divz,ovf,inv#,unf,denorm

# Oracle sunf95
SFORT := sunf95
SFORT := $(SFORT) -w3 -u -U -ansi -xcheck=%all -C

stest_i2_r4_d1_tst stest_i4_r4_d1_tst stest_i8_r4_d1_tst stest_i2_r4_d0_tst stest_i4_r4_d0_tst stest_i8_r4_d0_tst: \
	FC1 := $(SFORT) $(FFLAGS1) -fnonstd -ftrap=division
stest_i2_r4_d1_tst stest_i4_r4_d1_tst stest_i8_r4_d1_tst stest_i2_r4_d0_tst stest_i4_r4_d0_tst stest_i8_r4_d0_tst: \
	FC2 := $(SFORT) $(FFLAGS2) -fnonstd -ftrap=division

stest_i2_r8_d1_tst stest_i4_r8_d1_tst stest_i8_r8_d1_tst stest_i2_r8_d0_tst stest_i4_r8_d0_tst stest_i8_r8_d0_tst: \
	FC1 := $(SFORT) $(FFLAGS1) -fnonstd -ftrap=overflow,division,invalid#,underflow
stest_i2_r8_d1_tst stest_i4_r8_d1_tst stest_i8_r8_d1_tst stest_i2_r8_d0_tst stest_i4_r8_d0_tst stest_i8_r8_d0_tst: \
	FC2 := $(SFORT) $(FFLAGS2) -fnonstd -ftrap=overflow,division,invalid#,underflow

stest_i2_r16_d1_tst stest_i4_r16_d1_tst stest_i8_r16_d1_tst stest_i2_r16_d0_tst stest_i4_r16_d0_tst stest_i8_r16_d0_tst: \
	FC1 := $(SFORT) $(FFLAGS1) -fnonstd -ftrap=overflow,division,invalid#,underflow
stest_i2_r16_d1_tst stest_i4_r16_d1_tst stest_i8_r16_d1_tst stest_i2_r16_d0_tst stest_i4_r16_d0_tst stest_i8_r16_d0_tst: \
	FC2 := $(SFORT) $(FFLAGS2) -fnonstd -ftrap=overflow,division,invalid#,underflow

# Intel ifx
XFORT := ifx
XFORT := $(XFORT) -warn
XFORT := $(XFORT) -stand f$(FS) -warn all -debug extended -fimplicit-none \
	-traceback -debug-parameters all -fp-stack-check

xtest_i2_r4_d1_tst xtest_i4_r4_d1_tst xtest_i8_r4_d1_tst xtest_i2_r4_d0_tst xtest_i4_r4_d0_tst xtest_i8_r4_d0_tst: \
	FC1 := $(XFORT) $(FFLAGS1) -fp-trap=divzero
xtest_i2_r4_d1_tst xtest_i4_r4_d1_tst xtest_i8_r4_d1_tst xtest_i2_r4_d0_tst xtest_i4_r4_d0_tst xtest_i8_r4_d0_tst: \
	FC2 := $(XFORT) $(FFLAGS2) -check all -fp-trap=divzero

xtest_i2_r8_d1_tst xtest_i4_r8_d1_tst xtest_i8_r8_d1_tst xtest_i2_r8_d0_tst xtest_i4_r8_d0_tst xtest_i8_r8_d0_tst: \
	FC1 := $(XFORT) $(FFLAGS1) -ftrapuv -init=snan,array -fpe0 -fpe-all=0 -assume ieee_fpe_flags \
	-fp-trap=divzero,invalid,overflow#,underflow,denormal
	#-no-ftz -fp-model strict
xtest_i2_r8_d1_tst xtest_i4_r8_d1_tst xtest_i8_r8_d1_tst xtest_i2_r8_d0_tst xtest_i4_r8_d0_tst xtest_i8_r8_d0_tst: \
	FC2 := $(XFORT) $(FFLAGS2) -check all -ftrapuv -init=snan,array -fpe0 -fpe-all=0 -assume ieee_fpe_flags \
	-fp-trap=divzero,invalid,overflow#,underflow,denormal
	#-no-ftz -fp-model strict

xtest_i2_r16_d1_tst xtest_i4_r16_d1_tst xtest_i8_r16_d1_tst xtest_i2_r16_d0_tst xtest_i4_r16_d0_tst xtest_i8_r16_d0_tst: \
	FC1 := $(XFORT) $(FFLAGS1) -ftrapuv -init=snan,array -fpe0 -fpe-all=0 -assume ieee_fpe_flags \
	-fp-trap=divzero,invalid,overflow#,underflow,denormal
	#-no-ftz -fp-model strict
xtest_i2_r16_d1_tst xtest_i4_r16_d1_tst xtest_i8_r16_d1_tst xtest_i2_r16_d0_tst xtest_i4_r16_d0_tst xtest_i8_r16_d0_tst: \
	FC2 := $(XFORT) $(FFLAGS2) -check all -ftrapuv -init=snan,array -fpe0 -fpe-all=0 -assume ieee_fpe_flags \
	-fp-trap=divzero,invalid,overflow#,underflow,denormal
	#-no-ftz -fp-model strict

# G95
# The compilation of MEX gateways will fail if -std is imposed.
9FORT := g95
9FORT := $(9FORT) -pedantic -Wall -Wextra \
	-Werror=100,113,115,137,146,147,159,163 \
	-Wimplicit-none -Wline-truncation -Wprecision-loss -Wunused-module-vars -Wunused-vars -Wunset-vars \
	-fimplicit-none -fbounds-check -ftrace=full -freal=nan -fmodule-private

9test_i2_r4_d1_tst 9test_i4_r4_d1_tst 9test_i8_r4_d1_tst 9test_i2_r4_d0_tst 9test_i4_r4_d0_tst 9test_i8_r4_d0_tst: \
	FC1 := $(9FORT) $(FFLAGS1)
9test_i2_r4_d1_tst 9test_i4_r4_d1_tst 9test_i8_r4_d1_tst 9test_i2_r4_d0_tst 9test_i4_r4_d0_tst 9test_i8_r4_d0_tst: \
	FC2 := $(9FORT) $(FFLAGS2)

9test_i2_r8_d1_tst 9test_i4_r8_d1_tst 9test_i8_r8_d1_tst 9test_i2_r8_d0_tst 9test_i4_r8_d0_tst 9test_i8_r8_d0_tst: \
	FC1 := $(9FORT) $(FFLAGS1)
9test_i2_r8_d1_tst 9test_i4_r8_d1_tst 9test_i8_r8_d1_tst 9test_i2_r8_d0_tst 9test_i4_r8_d0_tst 9test_i8_r8_d0_tst: \
	FC2 := $(9FORT) $(FFLAGS2)

9test_i2_r16_d1_tst 9test_i4_r16_d1_tst 9test_i8_r16_d1_tst 9test_i2_r16_d0_tst 9test_i4_r16_d0_tst 9test_i8_r16_d0_tst: \
	FC1 := $(9FORT) $(FFLAGS1)
9test_i2_r16_d1_tst 9test_i4_r16_d1_tst 9test_i8_r16_d1_tst 9test_i2_r16_d0_tst 9test_i4_r16_d0_tst 9test_i8_r16_d0_tst: \
	FC2 := $(9FORT) $(FFLAGS2)

####################################################################################################
# All the tests.
# GNU make manual: Recursive make commands should always use the variable MAKE, not the explicit
# command name `make`.
test:
	$(MAKE) $(TESTS)

####################################################################################################
# Make a compiler-specific test.
# N.B.:
# 1. Execute CHCKTST by  "bash $(CHCKTST)" instead of just "$(CHCKTST)", because "$(CHCKTST)" may
# not be executable on all operating systems.
# 2. The log for itest or itest_i2 will be itest_(STAMP). Similar for other tests.
$(TESTS) $(TESTS_INT):
	@mkdir -p $(LOG_DIR)
	@printf "\n$@ starts.\n\n" | tee -a "$(LOG_DIR)/$(shell echo $@ | sed "s/_.*//").log"
	@$(MAKE) $(SUBTESTS) #--jobs $(NPROCS)
	@bash $(CHCKTST) --error "$(LOG_DIR)/$(shell echo $@ | sed "s/_.*//").log"
	@bash $(CHCKTST) --warning "$(LOG_DIR)/$(shell echo $@ | sed "s/_.*//").log"
	@printf "\n\n$@ ends!\n\n" | tee -a "$(LOG_DIR)/$(shell echo $@ | sed "s/_.*//").log"
	@mv "$(LOG_DIR)/$(shell echo $@ | sed "s/_.*//").log" "$(LOG_DIR)/$@_$(STAMP).log"
	@$(MAKE) clean


# Make a compiler-specific subtest.
# N.B.: The prerequisite should NOT include files that may not exist, e.g., $(SRC), because
# Make will ignore the rule if such files do not exist, resulting in "No rule to make ..." mistake.

%_tst: source_% header_%
	@mkdir -p $(LOG_DIR)
	@printf "\n$@ starts.\n\n" | tee -a "$(LOG_DIR)/$@.log"
	@($(FC1) -c $(SRC) && $(FC2) -c $(SRC)) 2>&1 \
	| grep -v "^[[:blank:]]*$$" \
	| grep -v "Absoft ANSI 1610:" \
	| grep -v "Absoft Pro Fortran.*: 0 Errors, 0 Warnings, 0 Other messages," \
	| grep -v "after the END INTERFACE keywords is only legal in Fortran 95 and beyond" \
	| grep -v "NAG Fortran Compiler Release [0-9]*.* Build [0-9]*" \
	| grep -v "Questionable: ./lincoa/geometry.f90, line [0-9]*: Variable RSTAT set but never referenced" \
	| grep -v "Expression in IF construct is constant" \
	| grep -v "NAG Fortran Compiler normal termination" \
	| grep -v "NAG Fortran Compiler normal termination, [0-9]* info message" \
	| grep -v "Warning: Change of value in conversion from .INTEGER(8). to .REAL(8). at (1) \[-Wconversion\]" \
	| grep -v "Warning: Change of value in conversion from .REAL(16). to .REAL(8). at (1) \[-Wconversion\]" \
	| grep -v "Extension: fmxapi\.F90, line [0-9]*: Byte count on numeric data type" \
	| grep -v "Extension: gethuge\.F90, line [0-9]*: Byte count on numeric data type" \
	| grep -v "Extension: cbfun\.F90, line [0-9]*: Byte count on numeric data type" \
	| grep -v "Extension: \./classical/fmxcl\.F90, line [0-9]*: Byte count on numeric data type" \
	| grep -v "Extension: \./classical/fmxcl\.F90, line [0-9]*: Line longer than 132 characters" \
	| grep -v "Extension: .*_mex\.F90, line [0-9]*: Byte count on numeric data type" \
	| grep -v "Extension: .*_mex\.F90, line [0-9]*: Line longer than 132 characters" \
	| grep -v "detected at \*@[0-9]*" \
	| grep -v "Info: fmxapi\.F90, line [0-9]*: Possibly discontiguous POUT passed to old style dummy" \
	| grep -v "Info: No licences currently available for product" \
	| grep -v "Info: Licence received, continuing" \
	| grep -v "Loading..." \
	| grep -v "Linking:" \
	| grep -v "univar\.f90([0-9]*): remark #7712: This variable has not been used\.\s*\[ANGLE\]" \
	| grep -v "f90comp: [0-9]* SOURCE LINES" \
	| grep -v "f90comp: [0-9]* ERRORS, [0-9]* WARNINGS" \
	| grep -v "ANSI: PROCEDURE is a Fortran 2003 feature" \
	| grep -v "ANSI: Use of INTEGER\*[0-9]* is an extension to the Fortran standard" \
	| grep -v "ANSI: Use of REAL\*[0-9]* is an extension to the Fortran standard" \
	| grep -v "ANSI: Fortran requires all intrinsic procedure actual arguments to be type integer or character for restricted expressions" \
	| grep -v "common/history\.f90.*Line = 162, Column = 133: ANSI: Free source form line contains more than 132 characters." \
	| grep -v "remark #5415: Feature not yet implemented" \
	| grep -v "interpolation error" \
	| grep -v "WARNING --  When --chk x is specified" \
	| grep -v "Warning (165): Implicit interface 'calfun' called at (1)" \
	| grep -v "Warning (165): Implicit interface 'calcfc' called at (1)" \
	| grep -v "Warning (102): MODULE PROCEDURE 'inv' USEd at (1) is not referenced" \
	| grep -v "Warning (102): MODULE PROCEDURE 'calfun' USEd at (1) is not referenced" \
	| grep -v "Warning (102): MODULE PROCEDURE 'calcfc' USEd at (1) is not referenced" \
	| grep -v "Warning (102): MODULE PROCEDURE 'redrat' USEd at (1) is not referenced" \
	| grep -v "Warning (102): MODULE PROCEDURE 'redrho' USEd at (1) is not referenced" \
	| grep -v "common/linalg.F90:[0-9]*:.*pivote.*may be used uninitialized in this function" \
	| grep -v "common/linalg.F90:[0-9]*:.*rank.*may be used uninitialized in this function" \
	| grep -v "common/preproc.f90:22:.*min_maxfun.*may be used uninitialized in this function" \
	| grep -v "common/preproc.f90:22:.*unit_memo.*may be used uninitialized in this function" \
	| grep -v "W-0173-PGI Fortran extension: nonstandard use of data type length specifier" \
	| grep -v "[0-9]\s*inform,\s*[0-9]*\s*warnings,\s*[0-9]\s*severes,\s*[0-9]\s*fatal for" \
	| grep -v "Warning: GNU Extension: Nonstandard type declaration INTEGER\*[1-9].*" \
	| grep -v "Warning: GNU Extension: Nonstandard type declaration REAL\*[1-9].*" \
	| grep -v "warning #7601: F[0-9]* standard does not allow an internal procedure to be an actual argument procedure name" \
	| grep -v "warning #7893: Allocatable dummy arguments is an extension of Standard F95" \
	| grep -v "warning #7894: Allocatable function results is an extension of Standard F95" \
	| grep -v "warning #8192: A procedure declaration statement is not standard Fortran 95" \
	| grep -v "warning #7410: Fortran 95 does not allow this keyword" \
	| grep -v "warning #5196: Fortran [0-9]* does not allow array constructors in square brackets" \
	| grep -v "warning #6916: Fortran [0-9]* does not allow this length specification\.\s*\[[0-9]*\]" \
	| grep -v "warning #7346: The CHARACTER\* form of a CHARACTER declaration is an obsolescent feature in Fortran [0-9]*" \
	| grep -v "warning #6009: Fortran [0-9]* specifies that an elemental intrinsic function here be of type integer or character" \
	| grep -v "warning #5268: Extension to standard: The text exceeds right hand column allowed on the line" \
	| grep -v "all warnings being treated as errors" \
	| tee -a "$(LOG_DIR)/$@.log"
	@bash $(CHCKTST) --error "$(LOG_DIR)/$@.log"
	@bash $(CHCKTST) --warning "$(LOG_DIR)/$@.log"
	@printf "$@ ends at $(shell date +%Y.%m.%d_%H.%M.%S).\n" | tee -a "$(LOG_DIR)/$@.log"
	@cat "$(LOG_DIR)/$@.log" >> "$(LOG_DIR)/$(shell echo $@ | sed "s/_.*//").log"
	@rm "$(LOG_DIR)/$@.log" || :
	@$(MAKE) cleanmisc

# Make a local copy of the source code for the test.
source_%: $(SRC_DIRS)
	@printf "\nMaking a copy of the source code for the test.\n"
	@for DIR in $(SRC_DIRS); do cp -r "$$DIR" ./; done
	@for SRC in $(MEXGATE_SRC); do cp $(MEXGATE_DIR)/"$$SRC" ./; done
	@cp $(MEXGATE_DIR)/$(DEBUGF90) ./$(COMMON)  # Use the MEX version of debug.F90 instead of the Fortran version.
	@cp $(TEST_DIR)/fintrf.h ./  # The MathWorks header file for Fortran MEX
	@find ./ -type f \( \
		-name "*.mod" \
		-o -name "*.o" \
		-o -name "*.dbg" \
		-o -name "*.cmdx" \
		-o -name "*.cmod" \
		-o -name "*.ilm" \
		-o -name "*.stb" \
		-o -name "*.out" \
		-o -name "*__genmod.f90" \
		\) -exec rm {} \;  # Cleaning up; important!!!
	@if echo $@ | grep -q "stest"; then \
		printf "\nPreparing the source code for $@.\n" ; \
		bash ../sunsrc ./ ; \
	fi
	@if echo $@ | grep -q "atest\|9test"; then \
		printf "\nPreparing the source code for $@.\n" ; \
		bash ../a9src ./ ; \
	fi
	@if echo $@ | grep -q "stest\|9test"; then \
		printf "\nPreparing the source code for $@.\n" ; \
		bash ../s9src ./ ; \
	fi
	@if echo $@ | grep -q "ftest" && ! type flang | grep -iq "bisheng\|AMD" ; then \
		printf "\nPreparing the source code for $@.\n" ; \
		bash ../flsrc ./ ; \
	fi
	@printf "Done.\n"

# Adapt the header file for the test.
header_%: IK = $(shell expr 8 \* $$(echo $@ | sed "s/.*_i//" | sed "s/_.*//"))
header_%: RP = $(shell expr 8 \* $$(echo $@ | sed "s/.*_r//" | sed "s/_.*//"))
header_%: DBG = $(shell echo $@ | sed "s/.*_d//" | sed "s/_.*//")
header_%: QPAVLB = $(shell expr $$(echo $@ | sed "s/.*_r//" | sed "s/_.*//") / 16)
header_%: source_%
	@printf "\nPreparing the header file for the test.\n"
	$(SEDI) "0,/^#define __QP_AVAILABLE__ [0-9]*/s//#define __QP_AVAILABLE__ $(QPAVLB)/" $(HEADERS)
	$(SEDI) "0,/^#define __INTEGER_KIND__ [0-9]*/s//#define __INTEGER_KIND__ $(IK)/" $(HEADERS)
	$(SEDI) "0,/^#define __REAL_PRECISION__ [0-9]*/s//#define __REAL_PRECISION__ $(RP)/" $(HEADERS)
	$(SEDI) "0,/^#define __DEBUGGING__ [0-9]*/s//#define __DEBUGGING__ $(DBG)/" $(HEADERS)
	@printf "Done.\n"


####################################################################################################
# Cleaning up.
# ":" means to do nothing in bash. We can use "COMMAND || :" to avoid errors when COMMAND fails.
cleanmisc:
	@printf "\nCleaning up miscellaneous files ...\n"
	@rm -f *.o *.mod *.dbg *.cmdx *.cmod *.ilm *.stb *.out *__genmod.f90 || :
	@rm -f *_output.txt || :
	@printf "Done.\n"

cleansrc:
	@printf "\nCleaning up the source code ...\n"
	@for ITEM in $(COMMON) $(SOLVER) ; do  \
		if [ `ls -1 "$$ITEM" 2>/dev/null | wc -l ` -gt 0 ] ; \
			then mkdir -p $(TRASH_DIR) && rm -rf $(TRASH_DIR)/"$$ITEM" || : ; \
			mv "$$ITEM" $(TRASH_DIR) > /dev/null 2>&1 || : ; \
		fi ; \
	done
	@printf "Done.\n"

clean: cleanmisc cleansrc

cleanall: clean
	@printf "\nRemoving the contents of $(TEST_SOLVER_DIR) ...\n"
	@rm -rf $(TEST_SOLVER_DIR)/* &> /dev/null || :
	@printf "Done.\n"
